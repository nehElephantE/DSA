-> represent karne ke 2 tareeke - adjacency matrix and adjacency list
-> Graph mein edges aur vertices rehte hai
-> Humlog ek arraylist banayenge which consists of arrays of edges (src-nbr-wt) for each vertice
Suppose graph mein 3 vertex hai

0 - 0-1-3,0-2-5
1 - 1-0-3,1-2-9
2 - 2-0-5,2-1-9

##########################
YOU ARE GIVEN A GRAPH,A SRC VERTEX AND A DESTINATION VERTEX. YOU ARE REQUIRED TO FIND IF A PATH
EXISTS BETWEEN SRC AND DEST. IF IT DOES PRINT IT ELSE RETURN FALSE

7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
0
6

static class Edge{
        int src;
        int nbr;
        int wt;

        Edge(int src, int nbr, int wt){
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }


    public static boolean hasPath(ArrayList<Edge>[] graph, int src, int dest, boolean[] visited){
        if(src == dest){
            return true;
        }

        visited[src] = true;

        for(Edge edge : graph[src]){
            if(visited[edge.nbr] == false){
                boolean NeighHasPath = hasPath(graph, edge.nbr, dest,visited);
                if(NeighHasPath == true){
                    return true;
                }
            }
        }
        return false;
    }
    public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        // suppose vtces = 3

        // yahan tak graph = [ , , ] kuch aisa dikhega
        for(int i = 0;i<vtces;i++){
            graph[i] = new ArrayList<>();
        }

        // graph = [ [], [], [] ]

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());

        boolean[] visited = new boolean[vtces];
        boolean path = hasPath(graph, src, dest,visited);

    }


##########################
YOU ARE GIVEN A GRAPH, A SRC VERTEX AND A DESTINATION VERTEX. YOU ARE REQUIRED TO FIND ALL PATHS
BETWEEN SRC AND DEST. FIND THEM IN LEXOGRAPHICAL ORDER

public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        // suppose vtces = 3

        // yahan tak graph = [ , , ] kuch aisa dikhega
        for(int i = 0;i<vtces;i++){
            graph[i] = new ArrayList<>();
        }

        // graph = [ [], [], [] ]

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());

        boolean[] visited = new boolean[vtces];
        printAllPaths(graph, src, dest,visited,"");
    }

    public static boolean printAllPaths(ArrayList<Edge>[] graph, int src, int dest, boolean[] visited, String psf){
        if(src == dest){
            System.out.println(psf);
            return;
        }

        visited[src] = true;

        for(Edge edge : graph[src]){
            if(visited[edge.nbr] == false){
                printAllPaths(graph, edge.nbr, dest, visited, psf + edge.nbr)
            }
        }
        visited[src] = false;
    }




##########################
YOU ARE GIVEN A GRAPH, A SRC AND DESTINATION VERTEX. YOU ARE GIVEN A NUMBER NAMED CRITERIA AND A NUMBER K. YOU ARE REQUIRED TO FIND AND PRINT THE VALUES OF 
SMALLEST PATH AND ITS WEIGHT SEPERATED BY @ LARGEST PATH AND ITS WEIGHT SEPERATED BY @, JUST LARGER PATH (THAN CRITERIA IN TERMS OF WEIGHT) AND ITS WEIGHT SEPERATED BY @
kTH LARGEST PATH AND ITS WEIGHT SEPERATED BY @, JUST LARGER PATH (THAN CRITERIA IN TERMS OF WEIGHT) AND ITS WEIGHT SEPERATED BY @


static class Edge{
        int src;
        int nbr;
        int wt;

        Edge(int src, int nbr, int wt){
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }

    static class Pair implements Comparable<Pair>{
        int wsf;
        String psf;

        Pair(int wsf, String psf){
            this.wsf = wsf;
            this.psf = psf;
        }

        public int compareTo(Pair o){
            return this.wsf = o.wsf;
        }
    }

static  String spath;
    static Integer spathw = Integer.MAX_VALUE;
    static  String lpath;
    static Integer lpathw = Integer.MIN_VALUE;
    static  String cpath;
    static Integer cpathw = Integer.MAX_VALUE;
    static  String fpath;
    static Integer fpathw = Integer.MIN_VALUE;
    static PriorityQueue<Pair> pq = new PriorityQueue<>();
    // Priority Queue mein by default ascending order mein sort hota hai
    

    public static void multisolver(ArrayList<Edge>[] graph, int src, int dest, boolean[] visited, int criteria, int k, String psf, int wsf){
         if(src == dest){
            if(wsf < spathw){
                spathw = wsf;
                spath = psf;
            }

            if(wsf > lpathw){
                lpathw = wsf;
                lpath = psf;
            }

            if(wsf > criteria && wsf < cpathw){
                cpathw = wsf;
                cpath = psf;
            }

            if(wsf < criteria && wsf > fpath){
                fpathw = wsf;
                fpathw = psf;
            }

            if(pq.size() < k){
                pq.add(new Pair(wsf,psf));
            }else{
                if(wsf > pq.peek().wsf){
                    pq.remove();
                    pq.add(new Pair(wsf,psf));
                }
            }
            return;
        }

        visited[src] = true;

        for(Edge edge : graph[src]){
            if(visited[edge.nbr] == false){
                multisolver(graph, edge.nbr, dest, visited, criteria, k, psf + e.nbr + wsf + e.wt)
            }
        }
        visited[src] = false;
    }

public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        // suppose vtces = 3

        // yahan tak graph = [ , , ] kuch aisa dikhega
        for(int i = 0;i<vtces;i++){
            graph[i] = new ArrayList<>();
        }

        // graph = [ [], [], [] ]

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());
        int criteria = Integer.parseInt(br.readLine());
        int k = Integer.parseInt(br.readLine());

        boolean[] visited = new boolean[vtces];

        multisolver(graph,src,dest,visited,criteria,k,src+"",0);
        System.out.println("Smallest Path = " + spath + "@" + spathw);
        System.out.println("Largest Path = " + lpath + "@" + lpathw);
        System.out.println("Just Largest Path Than = " + criteria + "=" + cpath + "@" + cpathw);
        System.out.println("Just Smallest Path Than = " + criteria + "=" + fpath + "@" + fpathw);
        System.out.println(k + "th Path = " + pq.seek().psf + "@" + pq.peek().wsf);
    }














##########################
YOU ARE GIVEN A GRAPH. YOU ARE REQUESTED TO FIND AND PRINT ALL CONNECTED COMPONENTS

public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        // suppose vtces = 3

        // yahan tak graph = [ , , ] kuch aisa dikhega
        for(int i = 0;i<vtces;i++){
            graph[i] = new ArrayList<>();
        }

        // graph = [ [], [], [] ]

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());
        ArrayList<ArrayList<Integer>> comps = new ArrayList<>();
        boolean[] visited = new boolean[vtces];

        for(int v = 0;v<vtces;v++){
            if(visited[v] == false){
                ArrayList<Integer> comp = new ArrayList<>();
                drawTree(graph, v,comp, visited);
                comps.add(comp);
            }
        }

        System.out.println(comps);
    }

// tree ussi ka banega joh unvisited hoga...aur neighbours bhi wohin joh unvisited honge

    public static void drawTree(ArrayList<Edge>[] graph, int src, ArrayList<Integer> comp, boolean[] visited){
        visited[src] = true;
        comp.add(src);
        for(Edge e : graph[src]){
            if(visited[e.nbr] == false){
                drawTree(graph, e.nbr, comp, visited);
            }
        }
    }


##########################
IS GRAPH CONNECTED

// a graph is connected if har vertex se har vertex pe jaa sakte hai
// toh get connected components wale code mein humara outer array list ka size 1 hona chahiye tabhi graph connected hoga

if(comps.size() == 1){
        System.out.println(" graph connected");
}


##########################
COUNT NUMBER OF ISLANDS - GIVEN A 2D ARRAY OF 0s and 1s WHERE 0 REPRESENTS LAND AND 1 REPRESENTS WATER. EACH ONE IS CONNECTED IN 4 DIRECTIONS ...(NEWS)

// every cell is a vertex...toh get connected components jaise hi har ek vertex se tree banate hai...joh banega utna woh component



##########################
BREADTH FIRST TRAVERSAL (BFS)

    class Pair{
        int v;
        String psf; //Path so far

        Pair(int v, String psf){
            this.v = v;
            this.psf = psf
        }
    }

    
    // Tree mein level order mein queue use hota hai...BFS is level order only hence ismein bhi queue use hoga
    // pehle queue mein source aur source tak ka part daalkr rakhna hai (2_2)
    // Use this - R M* W A* - Remove...Mark * (visit ho gaya...agar already * hai toh continue)....
    // Work (Print kar do paths)...Add * ( Add the nbr jiske star ni marked hai)
    // 

    public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        // suppose vtces = 3

        // yahan tak graph = [ , , ] kuch aisa dikhega
        for(int i = 0;i<vtces;i++){
            graph[i] = new ArrayList<>();
        }

        // graph = [ [], [], [] ]

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());
        int criteria = Integer.parseInt(br.readLine());
        int k = Integer.parseInt(br.readLine());


        ArrayDeque<Pair> queue = new ArrayDeque<>();
        queue.add(new Pair(src, src+"")); // queue mein src aur uske utne tak ka path add kiya
        boolean[] visited = new boolean[vtces];

        while(queue.size() > 0){
            //R M* W A*
            Pair rem = queue.removeFirst();

            if(visited[rem.v] == true){
                continue;
            }
            visited[rem.v] = true;
            System.out.println(rem.v + "@" + rem.psf);

            for(Edge e : graph[rem.v]){
                if(visited[e.nbr] == false){
                    queue.add(new Pair(e.nbr, rem.psf + e.nbr)); // path hoga remove wale ke path mein nbr ko add
                }
            }
        }



##########################
IS A GRAPH CYCLIC

// har vertex se check karna hai bfs use karke ...ki agar we come across a verex joh already marked hai matlab humlog pehle idhar aaye hai hence cyclic

    class Pair{
        int v;
        String psf; //Path so far

        Pair(int v, String psf){
            this.v = v;
            this.psf = psf
        }
    }

public static boolean IsCyclic(ArrayList<Edge>[] graph, int src, boolean[] visited){
        ArrayDeque<Pair> queue = new ArrayDeque<>();
        queue.add(new Pair(src, src+"")); // queue mein src aur uske utne tak ka path add kiya
        boolean[] visited = new boolean[vtces];

        while(queue.size() > 0){
            //R M* W A*
            Pair rem = queue.removeFirst();

            if(visited[rem.v] == true){
                return true;
            }
            visited[rem.v] = true;

            for(Edge e : graph[rem.v]){
                if(visited[e.nbr] == false){
                    queue.add(new Pair(e.nbr, rem.psf + e.nbr)); // path hoga remove wale ke path mein nbr ko add
                }
            }
        }

        return false;
    }
    

public static void main(String[] args){
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        // suppose vtces = 3

        // yahan tak graph = [ , , ] kuch aisa dikhega
        for(int i = 0;i<vtces;i++){
            graph[i] = new ArrayList<>();
        }

        // graph = [ [], [], [] ]

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());
        int criteria = Integer.parseInt(br.readLine());
        int k = Integer.parseInt(br.readLine());

      
        boolean[] visited = new boolean[];
        for(int v =0;v<vtces;v++){
            if(visited[v] == false){
                boolean cyclic = IsCyclic(graph, v, visited);
                if(cyclic){
                    System.out.println("Graph is Cyclic");
                }
            }
        }
    }



##########################
IS A GRAPH BIPARTITE

// bipartite means its possible to divide the vertex into 2 grps of mutually exhaustive and exclusive grps so that edges are across sets
// every non cyclic graph is bipartite
// odd size cyclic - non bipartite....even size cyclic- bipartite



##########################
##########################
##########################
