##################
ADD LAST IN A LINKED LIST

    public static void main(String[] args){

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        LinkedList list = new LinkedList();

        String str = br.readLine();
        while(str.equals("quit") == false){
            if(str.startsWith("addLast")){
                int val = Integer.parseInt(str.split(" ")[1]);
                list.addLAst(val);
            }
            str = br.readLine();
        }

        testList(list);

        public static void testList(LinkedList list){
            for(Node temp = list.head; temp != null; temp = temp.next){
                System.out.println(temp.data);
            }
            System.out.println(list.size);

            if(list.size > 0){
                System.out.println(list.tail.data);
            }
        }


        public class Node{
            int data;
            Node next;
        }

        public class LinkedList{
            Node head;
            Node tail;
            int size;
        }

        void addLast(int val){
            // step1 - make a new node
            // step2 - data add kardo
            // step3 - uska next null
            // step4 - present tail ke next pe iss new node ka add likhdo
            // step5 - new node ko tail banado
            // step6 - size++

            if(size == 0){
                Node temp = new Node();
                temp.data = val;
                temp.next = null;
                head = tail = temp;
                size++;
            }

            else{
                Node temp = new Node();
                temp.data = val;
                temp.next = null;
                tail.next = temp;
                tail = temp;
                size++;
            }
        }
    }


##################
DISPLAY AND SIZE OF LINKED LIST

        public int size(){
            return size;
        }

        public void display(){
            Node temp = head; // ek temp variable ko head pe rakho
            // loop lagao jabh tak woh last node pe na pahunch jaaye
            // last node matlab jabh tak null na aa jaaye
            while(temp != null){
                System.outprintln(temp.data + " ");
                temp = temp.next;
            }
            System.outprintln();
        }


##################
REMOVE FIRST FROM LINKED LIST

        public void removeFirst(){
            if(size == 0){
                System.out.println("List is Empty");
            }
            else if(size == 1){
                head = tail = null;
                size = 0;
            }
            else{
                head = head.next;
                size--;
            }
        }



################################
GET VALUE IN LINKED LIST

public int getFirst(){
            if(size == 0){
                System.out.println("List is empty");
                return -1;
            }
            else{
                return head.data;
            }


        }

        public int getLast(){
            if(size == 0){
                System.out.println("List is empty");
                return -1;
            }
            else{
                return tail.data;
            }
        }

        public int getAt(int idx){
            if(size == 0){
                System.out.println("List is empty");
                return -1;
            }
            else if(idx < 0 || idx >= size){
                System.out.println("Invalid");
                return -1;
            }else{
                Node temp = head;
                for(int i = 0 ;i<idx;i++){
                    temp = temp.next;
                }
                return temp.data;
            }
        }

################################
ADD FIRST IN LINKED LIST

        public void addFirst(int val){
            Node temp =  new Node() // create a new node
            temp.data = val; //new node mein value add kardo
            temp.next = head;
            head = temp;

            if(size == 0){
                tail = temp;
            }
            size++;
        }

################################
ADD AT INDEX IN LINKED LIST

        public void addAt(int idx, int val){
            if(idx == 0){
                addFirst(val);
            }
            else if(idx == size - 1){{
                addLast(val);
            }}
            else if(idx < 0 || idx > size){
                System.out.println("Invalid");
            }
            else{
                Node node = new Node();
                temp.node = val;

                Node temp = head;
                for(int i =0;i<idx-1;i++){
                    temp = temp.next;
                }

                node.next = temp.next;
                temp.next = node;
                size++; 
            }
        }


################################
REMOVE LAST IN LINKED LIST

        public void removeLast(){
            if(size == 0){
                System.out.println("List is Empty");
            }
            else if(size == 1){
                head = tail = null;
                size = 0;
            }
            else{
                Node temp = head;

                for(int i = 0; i < size - 2 ;i ++){
                    temp = temp.next;
                }
                tail = temp;
                temp.next = null;
                size--;
            }
        }




################################
REVERSE A LINKED LIST

-> Agar data swap karna ho toh 
        public Node getNodeAt(int idx){
            Node temp = head;
            for(int i = 0;i<idx;i++){
                temp = temp.next;
            }
            return temp;
        }

        public void reverseLI(){
            int l = 0;
            int r = size - 1;

            while(l<r){
                Node left = getNodeAt(l);
                Node right = getNodeAt(r);

                int temp = left.data;
                left.data = right.data;
                right.data = temp;

                l++;
                r--;
            }
        }


-> Shift the pointer now not the data

        public void reverseLI2(){
            Node prev = null;
            Node curr = head;

            while(curr != null){
                Node next = curr.next;

                curr.next = prev;
                prev = curr;
                curr = next;
            }

            Node temp = head;
            head = tail;
            tail = temp;
        }


################################
REMOVE AT INDEX 

        public void removeAt(int idx){
            if(idx < 0 || idx >= size){
                System.out.println("Invalid");
            }
            else if(idx == 0){
                removeFirst();
            }
            else if(idx == size - 1){
                removeLast();
            }
            else{
                Node temp = head;
                for(int i = 0;i<idx-1;i++){
                    temp = temp.next;
                }

                temp.next = temp.next.next;
                size--;
            }
        }



################################
LINKED LIST TO QUEUE ADAPTER

        public class LLToQueue {
            LinkedList<Integer> list;

            public LLToQueue(){
                list = new LinkedList<>();
            }

            int size(){
                list.size();
            }

            void add(int val){
                list.addLast(val);
            }

            int remove(){
                if(size() == 0){
                    System.out.println("Queue Underflow");
                    return -1;
                }
                else{
                    return list.removeFirst();
                }
            }

            int peek(){
                if(size() == 0){
                    System.out.println("Queue Underflow");
                    return -1;
                }
                else{
                    return list.getFirst();
                }
            }
        }


################################
Kth ELEMENT FROM END IN LINKED LIST

        public int kthNodeFromLast(int k){
            // size - 1 karke bhi kar sakte hai last se print
            Node slowpt = head;
            Node fastpt = head;

            for(int i = 0;i<k;i++){
                // pehle fast pointer ko start se kth element pe le aao
                fastpt = fastpt.next;
            }

            // fast pointer ko move karate raho jabh tak woh last element na pahunch jaaye
            // saath saath slow pointer ko bhi move karate jaao 
            // jabh woh fast pt last element pe hoga ...slow pt last ke kth element pe hoga
            while(fastpt != tail){
                slowpt = slowpt.next;
                fastpt = fastpt.next;
            }
            return slowpt.data;
        }



################################
MIDDLE OF LINKED LIST

        public int mid(){
            Node slowpt = head;
            Node fastpt = head;

            while(fastpt.next != null && fastpt.next.next != null){
                slowpt = slowpt.next;
                fastpt = fastpt.next.next;
            }
            return slowpt;
        }

