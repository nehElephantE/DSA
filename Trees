#####################################
GENERIC TREE

-> if given an array of numbers like
10 20 50 -1 60 -1 -1 20 70 -1 80 110 -1 10 -1 -1 90 -1 -1 40 100 -1 -1 -1

// first no liya ...usko node banaya...dekha stack khali hai toh usko root bana diya...phir usko stack mein push kar diya
// next no dekha...if its not -1...usko root ka child banaya aur stack mein push kar diya
// toh agar koi number hai which is not -1 hence its the child of the previous node
// -1 dikha toh pop kar diya that is top most number removed


class Node{
    int data;
    ArrayList<Node> children = new ArrayList<>();
    // ek node ke kitne bhi children ho sakte hai
}

public class expert {
    public static void main(String[] args) {
       int[] arr = {10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1};
       Node root;
       Stack<Node> st = new Stack<>();
       for(int i = 0;i<arr.length;i++){
           if(arr[i] == -1){
               st.pop();
           }
           else{
               Node t = new Node();//node banaya
               t.data = arr[i]; // arr ka value usmein daal diya

// we need to see if stack is empty or not...and then joh upar element hoga(peek) uske children mein add karna hai

               if(st.size() > 0){
                   st.peek().children.add(t);
               }
               else{
                   root = t;
               }

               st.push(t);
           }
       }
    }
}



-> displaying generic tree


class Node{
    int data;
    ArrayList<Node> children = new ArrayList<>();
    // ek node ke kitne bhi children ho sakte hai
}

public class expert {

    public static void display(Node node){
        String str = node.data + "-> ";
        for(Node child : node.children){
            str += child.data + ", ";
        }
        str += ".";
        System.out.println(str);
        // itna tak ek node apne ko print kar dega

        for(Node child : node.children){
            display(child);
        }
        // yeh code will treat children as individual nodes and then
    }
    public static void main(String[] args) {
       int[] arr = {10,20,50,-1,60,-1,-1,30,70,-1,80,110,-1,120,-1,-1,90,-1,-1,40,100,-1,-1,-1};
       Node root =  null;
       Stack<Node> st = new Stack<>();
       for(int i = 0;i<arr.length;i++){
           if(arr[i] == -1){
               st.pop();
           }
           else{
               Node t = new Node();//node banaya
               t.data = arr[i]; // arr ka value usmein daal diya

               if(st.size() > 0){
                   st.peek().children.add(t);
               }
               else{
                   root = t;
               }

               st.push(t);

           }
       }

       display(root);
    }
}


-> size of generic tree

recursion se hum log sochte hai ki ek node apne neeche ke children ke count batayega

public static int size(Node node){
        int s = 0;
        for(Node child : node.children){
            int child_size = size(child);
            s = s+child_size;
        }
        s+=1; // root node ko add karne
        return s;
    }


-> Maximum in a generic tree

again recursion lekr dekho ki ek node apne usmein dekh lega...basically root ke children mein se max lo
ex ek root hai uske 3 children hai...har ek children ke subtree se max lo phir final max lo

 public static int max_node(Node node){
        int max_n= Integer.MIN_VALUE;
        for(Node child : node.children){
            // har ek node apne subtree mein se max dega
            int cm = max_node(child);
            max_n = Math.max(max_n,cm);
        }
        max_n = Math.max(node.data,max_n);
        //comparing with the root
        return max_n;
    }


-> height of a tree
root ke children pe recursion lagakr uska height nikalna hai ...uspr + 1 karne se height mil jayega


 public static int height(Node node){
        int ht = -1;
        // edges ke term mein poonche to -1 se initialise...nodes ke term mein poonche toh 0 se initialise
        for(Node child : node.children){
            int ch = height(child);
            ht = Math.max(ch,ht);
        }
        ht+=1;
        return ht;
    }


-> traversal of trees

    public static void traversals(Node node){

        // Pre Area will come before calling the recurssion
        System.out.println("Node Pre " + node.data)

        for(Node child : node.children){
            // edge pre
            System.out.println("Edge Pre " + node.data + "--" + child.data)
            traversals(child);
            // edge post
            System.out.println("Edge Post " + node.data + "--" + child.data)
        }

        // Post Area will come after calling the recurssion
        System.out.println("Node Post " + node.data)
    }


-> level order traversal
level by level traverse karna hai

remove.... print.... add
Ek queue lena hai...usmein root add karo...phir remove karo ...root ko print karo...phir uske children add karo
pehla child remove karo....print karo child ko....uss child ke children add karo queue mein
aise har ek level ke print ho jayenge

    public static void level_traversals(Node node){
        Queue<Node> q = new ArrayDeque<>();
        q.add(node);

        while(q.size() > 0){
            node = q.remove();
            System.out.println(node.data + " ");

            for(Node child:node.children){
                q.add(child);
            }
        }

        System.out.println(".");
    }


-> level order linewise

left to right line by line print karo tree ko
10
20 30
40 50 60 

aise line by line space ke saath print hona chahiye

Remove...print...add wala i concept lagega

consider 2 queues ...main and child
add the root in the main queue and its children in the child queue
from the main queue remove the element...print it ....then add all the elements of the child queue in main queue and empty the child queue ...then print enter like next
line

main queue - 10
child queue - 20 30

main queue - 20 30
child queue - 40 50 60

like this the procedure follows


    public static void level_traversals(Node node){
        Queue<Node> mq = new ArrayDeque<>()
        q.add(node);

        Queue<Node> cq = new ArrayDeque<>();

        while(mq.size() > 0){
            node = mq.remove();
            System.out.println(node.data + " ");

            for(Node child:node.children){
                cq.add(child);
            }

            if(mq.size() > 0){
                mq = cq;
                cq = new ArrayDeque<>();
                System.out.println();
            }
        }
    }


-> level order zigzag

root se start karo...then come 1 level down...right to left print..then 1 level down ...print left to right and so on

2 stacks ..main and child...add the root in the main stack...we need to do RPA...remove..print..add

since we need to print right to left in the 2nd level so for the roots add its child in the left-right manner in the child stack
then transfer the child stack components into the main stack and empty the child stack

then remove the child element from the main stack but since the 3rd layer has to be printed left to right so its children will be added right-left

   public static void level_traversals(Node node){
        Stack<Node> ms = new Stack<>;
        Stack<Node> cs = new Stack<>;

        ms.push(node);
        int level = 1;

        while(ms.size() > 0){
            node = ms.pop();
            System.out.println(node.data + " ");

            if(level % 2 == 1){
                for(int i = 0;i<node.children.size();i++){
                    Node child = node.children.get(i);
                    cs.push(child);
                }
            }
            else{
                for(int i = node.children.size()-1;i>=0;i--){
                    Node child = node.children.get(i);
                    cs.push(child);
                }
            }

            if(ms.size() == 0){
                ms = cs;
                cs = new Stack<>();
                level++;
                System.out.println;
            }
        }
    }


-> level traversal more approaches

consider a single queue...add root and null...use RPA..remove root ...add its children...then comes null...when u remove null u also add null
then u remove the 1st child...add its children...then other child's children ...until u come across a null...if null is there..add a null


// hume aise mq.add(null) ni karne deta hai java so we need to add appropriate constructors

class Node{
    int data;
    ArrayList<Node> children = new ArrayList<>();

    Node(){
        
    }

    Node(int data){
        this.data = data;
    }
}

public static void level_traversals(Node node){
        Queue<Node> mq = new ArrayDeque<>();
        q.add(node);
        q.add(new Node(-1));


        while(mq.size() > 0){
            node = mq.remove();

            if(node.data != -1){
                System.out.println(node.data + " ");

                for(Node child:node.children){
                    mq.add(child);
                }
            }
            else{
                // yeh check isiliye imp hai ki agar aur elements hi ni
                // hue add karne ko toh null add karke faida ni
                if(mq.size() > 0){
                    mq.add(new Node(-1));
                    System.out.println();
                }
            }
        }
    }


-> another traversal approach

    public static void level_traversals(Node node){

       // Humlog queue mein root daale 
        //    phir queue ka size pata lagaya ...in this case its 1
        //    matlab 1 baar loop chalega ...aur loop mein apne ko karna hai RPA
        //    matlab remove print and add its children
        //    suppose root ke 3 children hai...humne teeno ko add kiya 
        //    phirse size pata lagaya ...in this case its 3...then we do RPA 3 times
        //    and like this we proceed

        Queue<Node> mq = new ArrayDeque<>();
        mq.add(root);

        while(mq.size() > 0){
            int cicl = mq.size();

            for(int i = 0; i < cicl; i++){
                node = mq.remove();
                System.out.println(node.data + " ");

                for(Node child : node.children){
                    mq.add(child);
                }
            }
            System.out.println();
        }
    }


-> more approach for level traversal

// humlog 1 queue mein Node aur uska level add karenge

class Pair{
    Node node;
    int level;

    Pair(Node node, int level){
        this.node = node;
        this.level = level;
    }
}

    public static void leveltraversal(Node node){
        Queue<Pair> mq = new ArrayDeque<>();
        mq.add(new Pair(node,1));

        int level = 1;
        while(mq.size() > 0){
            Pair p = mq.remove();
            if(p.level > level){
                level = p.level;
                System.out.println();
            }

            System.out.println(p.node.data + " ");
            for(Node child: p.node.children){
                Pair cp = new Pair(child,p.level+1);
                mq.add(cp);
            }
        }
    }



-> mirror a generic tree

uska mirror image banana hai...matlab joh left side tha woh right pe aana chahiye
maan ke chalo ki har ek node apne children ka mirror image banana jaanta hai

phir root ko bhi karna hai

    public static void mirror(Node node){
        for(Node child:node.children){
            mirror(child);
        }

        Collections.reverse(node.children);
    }



-> remove leaves from generic tree

maan ke chalo ki ek node apne wale leaf node ko nikal dega

public static void removeleaf(Node node){
        for(int i = node.children.size() - 1 ; i >= 0; i--){
            Node child = node.children.get(i);
            if(child.children.size() == 0){
                node.children.remove(child);
            }
        }
        
        for(Node child:node.children){
            removeleaf(child);
        }

        // abh humlog last koi node pe aa gaye honge..abh humko leaf remove karna hai

        // yeh loop chalega hi aise because ek concurrent error aata hai
        // for(Node child:node.children){
        //     if(child.children.size() == 0){
        //         node.children.remove(child);
        //     }
        // }

        // arraylist mein agar humlog ek element remove karte hai toh baaki elements aage khisak jaata hai
        // array mein jaise 0 index ka element remove karne pe baaki elements shift ni hote but arraylist mein hote hai

        // for(int i = 0;i < node.children.size(); i ++){
        //     Node child = node.children.get(i);
        //     if(child.children.size() == 0){
        //         node.children.remove(child);
        //     }
        // }

        // toh apne ko upar wala loop ulta chalana hai
        // lekin post recursion mein remove karne se joh nodes leaf ni the woh bhi udd jayenge..toh apne ko pre call karna padega

        // for(int i = node.children.size() - 1 ; i >= 0; i--){
        //     Node child = node.children.get(i);
        //     if(child.children.size() == 0){
        //         node.children.remove(child);
        //     }
        // }
    }



-> Linearize a Generic Tree

10 -> 20,30
20 -> 40 , 50
40 -> 60

so output should be such  = 10 - 20 - 40 - 60 - 50 - 30...means for every node should only have 1 child

public static Node getTail(Node node){
        // check karte raho kiska children hai hi ni woh tail hoga
        while(node.children.size() == 1){
            node = node.children.get(0);
        }

        return node;
    }

    public static void linearize(Node node){
        // humlog maan lete hai ki yeh node apne neeche wale ko linearize kar dega
        for(Node child: node.children){
            linearize(child);
        }

        // last mein root ke children ko tailwise jodna hai...last child ko second ke usse jodna hai...phir usko first ke usse

        while(node.children.size() > 1){
            Node lastchild = node.children.remove(node.children.size() - 1);
            // element remove karne ke baad array list khisak jaati hai ..isiliye get (size - 1) kiya
            Node secondlast = node.children.get(node.children.size() - 1);
            Node secondlasttail = getTail(secondlast);
            secondlasttail.children.add(lastchild);
        }
    }


-> efficient approach for linearising
upar wale ka time complexity O(N^2) hai kyuki recurison ke baad likha ek loop hai matlab right side se nikalne par hi execute hoga woh after recursion likha hua
function...uske baad getTail function mein bhi loop hai
maan ke chalenge ki node linearise ke saath saath tail bhi batayega 

    public static void linearize(Node node){

        if(node.children.size() == 0){
            return node;
        }
        
       Node lasttail = linearize(node.children.get(node.children.size() - 1)); 
       while(node.children.size() > 1){
        Node last = node.children.remove(node.children.size() - 1);
        Node secondlast = node.children.get(node.children.size() - 1);
        Node secondlasttail = linearize(secondlast);
        secondlasttail.children.add(last);
       }

       return lasttail;
    }


-> Find an element in Generic Tree 
    public static boolean find(Node node, int data){
        // maan ke chalo ke woh node apne neeche search karke batayega
        // pehle check karo root hi toh ni then check others

        if(node.data == data){
            return true;
        }

        for(Node child : node.children){
            boolean fic = find(child,data);
            if(fic){
                return true;
            }
        }
        return false;
    }


-> Node to Root Path

    public static ArrayList<Integer> nodetopath(Node node, int data){
        if(node.data == data){
            ArrayList<Integer> list = new ArrayList<>();
            list.add(node.data);
            return list;
        }

        for(Node child: node.children){
            ArrayList<Integer> ptc = nodetopath(child, data);
            if(ptc.size() > 0){
                ptc.add(node.data);
            }
        }

        return new ArrayList<>();
    }



#######################
BINARY TREES
-> efficiently inserting and deleting in O(logn) whereas linked list does it in O(n)
-> binary tree can have 0,1,2 children
-> unbalanced binary tree...jismein left side node khali ho aur sirf right side pe node ho toh traversal phir O(n) ke ussmein hoga
-> height = max no of edges between the node and the leaf nodes
-> level = height of root - height of node......root level = 0
-> types - complete binary tree=>fill it from left to right.....full or strict binary tree=> every node has 0 or 2 children-1 nahi ho sakta
         .....perfect binary tree=> all internal nodes have complete nodes-all levels are full.....height balanced binary tree==> avg height O(logn)
.......skewed binary tree=>every node has 1 child => avg height O(n) like linked list....ordered binary tree=> every node has a property associated with it like bst

-> total nodes in perfect binary tree = 2^(h+1)-1
-> total no of leaf nodes in perfect binary tree = 2^h
-> internal nodes = total nodes - leaf nodes = 2^h -1
-> if u have n number of leaf then min no of levels = logn + 1 levels
-> if u have n number of leaf then min no of levels = logn+1  levels
-> strict binary tree....total leaf nodes = n....then internal nodes = n-1...hence in strict binary tree so leaf nodes = internal nodes+1
-> degree of tree can be 0,1,2


-> Given an Array - [50,25,12,n,n,37,30,n,n,n,75,62,n,70,n,n,87,n,n]
This is the pre order traversal of the binary tree
50 is the root node...left side pe 25...25 ke left side pe 12...12 ke right side pe kuch ni hence null...25 ke right side pe kuch ni hence null and so on


Consider a stack where the node and integer is pushed...where the integer value can be 1 or 2.or 3..1 means left child and 2 means right child and 3 means pop
Insert the node root with 1 <50-1> into the stack then check the next digit insert it to the left <25,1> and change the previous node to <50,2> indicating that
left has been filled...then when null is encountered just change it from 1 to 2 but dont push anything


import java.util.*;

public class binary {
    public static class Node{
        Node left;
        Node right;
        int data;

        public Node(int data,Node left,Node right){
            this.data = data;
            this.left = left;
            this.right = right;

        }
    }

        public static class Pair{
            Node node;
            int state;

            Pair(Node node, int state){
                this.node = node;
                this.state = state;
            }
        }


        public static void main(String[] args) {
            Integer[] arr = {50,25,12,null,null,37,30,null,null,null,75,62,null,70,null,null,87,null,null};
            Stack<Pair> st = new Stack<>();

            Node root = new Node(arr[0],null,null);
            Pair rp = new Pair(root,1);

            st.push(rp);
            int ind = 0;
            //array ka index hai

            while(st.size() > 0){
                Pair top = st.peek();
                //agar unka 1 hua toh left mein insert
                if(top.state == 1){
                    ind++;
                    if(arr[ind] != null){ // check kiya ki uss ind mein array ka element null toh ni
                        Node leftnode = new Node(arr[ind],null,null);
                        top.node.left = leftnode;

                        Pair leftpair = new Pair(leftnode,1);
                        st.push(leftpair); 
                    }
                    else{
                        // agar woh element null hua array mein then push ni karna stack mein
                        top.node.left = null;
                    }
                    top.state++;
                }
                else if(top.state == 2){
                    ind++;
                    if(arr[ind] != null){ // check kiya ki uss ind mein array ka element null toh ni
                        Node rightnode = new Node(arr[ind],null,null);
                        top.node.right = rightnode;

                        Pair rightpair = new Pair(rightnode,1);
                        st.push(rightpair); 
                    }
                    else{
                        // agar woh element null hua array mein then push ni karna stack mein
                        top.node.right = null;
                    }
                    top.state++;
                }
                else{
                    // 3 hoga toh pop
                    st.pop();
                }
            }

            display(root);
        }
}





-> Display a Binary Tree

        public static void display(Node node){ 


            // apne ko print aise karna hai ki node ke left ka data <- node ka data -> node ke right ka data

            String str = "";

            if(node == null){
                return;
            }

            str += node.left == null? "." : node.left.data + "";
            // str pe left ka data agar null hua toh . warna left ka data

            str += "<-" + node.data + "->";

            str += node.right == null? "." : node.right.data + "";

            System.out.println(str);


            // will keep faith that  a node knows how to print its family
            display(node.left);
            display(node.right);
        }


-> Size, Sum, Max and Height of a Binary Tree


        public static int size(Node node){

            // maan ke chal rahe ki ek node apna size bata dega

            if(node == null){
                return 0;
            }
                
            int leftside = size(node.left);
            int rightside = size(node.right);
            int totalsize = leftside + rightside + 1;
            return totalsize;
        }

        public static int sum(Node node){

            if(node == null){
                return 0;
            }

            int leftside = sum(node.left);
            int rightside = sum(node.right);
            int totalsum = leftside + rightside + node.data;
            return totalsum;
        }

        public static int max(Node node){

            // Koi bhi number ka min -> infinity ke saath nikalo...wohin number aa jaata hai
            // Koi bhi number ka max -> -inf ke saath nikalo...wojin number aa jaata hai

            if(node == null){
                return Integer.MIN_VALUE;
            }

            int leftside = max(node.left);
            int rightside = max(node.right);
            int overall_max = Math.max(Math.max(node.data,leftside),rightside);
            return overall_max;
        }

        public static int height(Node node){
            // height = depth of the deepest node

            if(node == null){
                return -1; // -1 for edges, 0 for nodes
            }

            int leftside = height(node.left);
            int rightside = height(node.right);
            int totalheight = Math.max(leftside,rightside)+1;
            return totalheight;
        }


-> Traversals in a Binary Tree

pre - before going deep into recursiom...root is first...NODE-LEFT-RIGHT
post - after recursion...root is last....LEFT-RIGHT-NODE
in - LEFT-NODE-RIGHT

        public static void traversals(Node node){
            if(node == null){
                return;
            }

            // recursion se pehle call - pre
            System.out.println(node.data + " in preorder");
            traversals(node.left);
            // recursion ke beech mein call - in
            System.out.println(node.data + "in inorder");
            traversals(node.right);
            // recursion ke baad mein call - post
            System.out.println(node.data + "in postorder");
        }


-> Level Order Traversal in a Binary Tree
generic tree wala hi
Do the RPA --- remove print add

        public static void levelOrder(Node node){
            Queue<Node> mq = new ArrayDeque<>();
            mq.add(node);

            while(mq.size() > 0){
                int count = mq.size();
                for(int i = 0;i<count;i++){
                    node = mq.remove();
                    System.out.println(node.data + " ");

                    if(node.left != null){
                        mq.add(node.left);
                    }
                    if(node.right != null){
                        mq.add(node.right);
                    }
                }
            }
        }


-> Iterative Pre, Post and In-Order Traversal in Binary Tree

bina recursion ke saath karna hai

Humlog ek stack mein node aur uska state push karenge ...start mein root node aur 1 push hoga...<root,1>..
1 means first time hence print it in pre ...change the state to 2 and push the left child with state 1
Agar null encounter hua toh sirf state badhao
2 matlab in...in mein print karo ...state change to 3...uska right child stack mein with state 1 push karo
and 3 matlab post and then pop()


        public static void IterativeTraversal(Node node){
            Stack<Pair> st = new Stack<>();
            Pair newpair = new Pair(node,1);

            st.push(newpair);
            String pre = "";
            String in = "";
            String post = "";

            while (st.size() > 0) {
                Pair top = st.peek();
                if(top.state == 1){
                    // pre, s++,left
                    pre += top.node.data + " ";
                    top.state++;

                    if(top.node.left != null){
                        Pair leftpair = new Pair(top.node.left, 1);
                        st.push(leftpair);
                    }


                }else if(top.state == 2){
                    // in,s++,right

                    in += top.node.data + " ";
                    top.state++;
                    
                    if(top.node.right != null){
                        Pair rightPair = new Pair(top.node.right, 1);
                        st.push(rightPair);
                    }
                }else{
                    // post,pop
                    post += top.node.data + " ";
                    st.pop;
                }
            }
            System.out.println(pre);
            System.out.println(in);
            System.out.println(post);
        }


-> Node to Root Path

static ArrayList<Integer> path;

        public static boolean find(Node node int data){
            if(node == null){
                return false;
            }

            if(node.data == data){
                path.add(node.data);
                return true;
            }

            // found in left child

            boolean filc = find(node.left, data);
            if(filc){
                path.add(node.data);
                return true;
            }

            // found in right child
            boolean firc = find(node.right,data);
            if(firc){
                path.add(node.data);
                return true;
            }

            return false;
            
        }


-> Print K Levels Down

print all nodes at level k


        public static void levelk(Node node){

            // recursion se pehle kyuki pre order mein karne bola hai

            if(node == null || k < 0){
                return;
            }
            if(k == 0){
                System.out.println(node.data);
            }

            levelk(node.left,k-1);
            levelk(node.right,k-1);
        }





####################
AVL TREES
-> for every node the height diff between left and right subtree <= 1
-> neeche se dekho ki konsa node unbalanced hai usse phir balance kardo
-> basic BST property ki node ke right me bade wale aur left mein chotte wale nodes honge still holds


class AVL {
  public class Node {
    private int value;
    private Node left;
    private Node right;
    private int height;

    public Node(int value) {
      this.value = value;
    }

    public int getValue() {
      return value;
    }
  }

  private Node root;

  public AVL() {

  }

  public int height() {
    return height(root);
  }
  private int height(Node node) {
    if (node == null) {
      return -1;
    }
    return node.height;
  }
  
  public void insert(int value) {
    root = insert(value, root);
  }

  private Node insert(int value, Node node) {
    if (node == null) {
      node = new Node(value);
      return node;
    }

    if (value < node.value) {
      node.left = insert(value, node.left);
    }

    if (value > node.value) {
      node.right = insert(value, node.right);
    }

    node.height = Math.max(height(node.left), height(node.right)) + 1;
    return rotate(node);
  }

  private Node rotate(Node node) {
    if (height(node.left) - height(node.right) > 1) {
      // left heavy
      if(height(node.left.left) - height(node.left.right) > 0) {
        // left left case
        return rightRotate(node);
      }
      if(height(node.left.left) - height(node.left.right) < 0) {
        // left right case
        node.left = leftRotate(node.left);
        return rightRotate(node);
      }
    }

    if (height(node.left) - height(node.right) < -1) {
      // right heavy
      if(height(node.right.left) - height(node.right.right) < 0) {
        // right right case
        return leftRotate(node);
      }
      if(height(node.right.left) - height(node.right.right) > 0) {
        // left right case
        node.right = rightRotate(node.right);
        return leftRotate(node);
      }
    }

    return node;
  }

  public Node rightRotate(Node p) {
    Node c = p.left;
    Node t = c.right;

    c.right = p;
    p.left = t;
    
    p.height = Math.max(height(p.left), height(p.right) + 1);
    c.height = Math.max(height(c.left), height(c.right) + 1);

    return c;
  }

  public Node leftRotate(Node c) {
    Node p = c.right;
    Node t = p.left;

    p.left = c;
    c.right = t;
    
    p.height = Math.max(height(p.left), height(p.right) + 1);
    c.height = Math.max(height(c.left), height(c.right) + 1);

    return p;
  }

  public void populate(int[] nums) {
    for (int i = 0; i < nums.length; i++) {
      this.insert(nums[i]);
    }
  }

  public void populatedSorted(int[] nums) {
    populatedSorted(nums, 0, nums.length);
  }

  private void populatedSorted(int[] nums, int start, int end) {
    if (start >= end) {
      return;
    }

    int mid = (start + end) / 2;

    this.insert(nums[mid]);
    populatedSorted(nums, start, mid);
    populatedSorted(nums, mid + 1, end);
  }

  public void display() {
    display(this.root, "Root Node: ");
  }

  private void display(Node node, String details) {
    if (node == null) {
      return;
    }
    System.out.println(details + node.value);
    display(node.left, "Left child of " + node.value + " : ");
    display(node.right, "Right child of " + node.value + " : ");
  }

  public boolean isEmpty() {
    return root == null;
  }

  public boolean balanced() {
    return balanced(root);
  }

  private boolean balanced(Node node) {
    if (node == null) {
      return true;
    }
    return Math.abs(height(node.left) - height(node.right)) <= 1 && balanced(node.left) && balanced(node.right);
  }

}



#######################
SEGMENT TREES

-> used when a ques or query involves a range like max,min,product,avg in range...does it in O(logn)
-> its a binary tree which consists of interval info and operation we are performing
-> har range ko /2 karte raho jabh tak leaf node mein sirf 1 hi element na reh jaaye array ke range mein
-> its a full binary tree....leaf nodes = n....internal nodes = n-1...total nodes = 2n-1
-> ya toh joh range chhaiye woh overlap karega...outside hoga ya wohin hoga joh chahiye


class SegmentTree {

  private static class Node {
    int data;
    int startInterval;
    int endInterval;
    Node left;
    Node right;

    public Node (int startInterval, int endInterval) {
      this.startInterval = startInterval;
      this.endInterval = endInterval;
    }
  }

  Node root;

  public SegmentTree(int[] arr) {
    // create a tree using this array
    this.root = constructTree(arr, 0, arr.length - 1);
  }

  private Node constructTree(int[] arr, int start, int end) {
    if(start == end) {
      // leaf node
      Node leaf = new Node(start, end);
      leaf.data = arr[start];
      return leaf;
    }

    // create new node with index you are at
    Node node = new Node(start, end);
    
    int mid = (start + end) / 2;

    node.left = this.constructTree(arr, start, mid);
    node.right = this.constructTree(arr, mid + 1, end);

    node.data = node.left.data + node.right.data;
    return node;
  }

  public void display() {
    display(this.root);
  }
  private void display(Node node) {
    String str = "";

    if(node.left != null) {
      str = str + "Interval=[" + node.left.startInterval + "-" + node.left.endInterval + "] and data: " + node.left.data + " => "; 
    } else {
      str = str + "No left child";
    }

    // for current node
    str = str + "Interval=[" + node.startInterval + "-" + node.endInterval + "] and data: " + node.data + " <= "; 
    
    if(node.right != null) {
      str = str + "Interval=[" + node.right.startInterval + "-" + node.right.endInterval + "] and data: " + node.right.data; 
    } else {
      str = str + "No right child";
    }

    System.out.println(str + '\n');

    // call recursion
    if(node.left != null) {
      display(node.left);
    }

    if(node.right != null) {
      display(node.right);
    }
  }

  // query
  public int query(int qsi, int qei) {
    return this.query(this.root, qsi, qei);
  }
  private int query(Node node, int qsi, int qei) {
    if(node.startInterval >= qsi && node.endInterval <= qei) {
      // node is completely lying inside query
      return node.data;
    } else if (node.startInterval > qei || node.endInterval < qsi) {
      // completely outside
      return 0;
    } else {
      return this.query(node.left, qsi, qei) + this.query(node.right, qsi, qei);
    }
  }

  // update
  public void update(int index, int value) {
    this.root.data = update(this.root, index, value);
  }
  private int update(Node node, int index, int value) {
    if (index >= node.startInterval&& index <= node.endInterval){
      if(index == node.startInterval && index == node.endInterval) {
        node.data = value;
        return node.data;
      } else {
        int leftAns = update(node.left, index, value);
        int rightAns = update(node.right, index, value);
        node.data = leftAns + rightAns;
        return node.data;
      }
    }
    return node.data;
  }
  
}



######################
GRAPHS

-> representing using adjacency matrix and adjacency list
public class kannu {
    static class Edge{
        int src; //source
        int nbr; // neighbour
        int wt; // weights

        Edge(int src, int nbr,int wt){
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }
    public static void main(String[] args) throws Exception{
        int vces = 7;
        ArrayList<Edge>[] graph = new ArrayList[vces];
        for(int i = 0;i<vces;i++){
            graph[i] = new ArrayList<>();
        }

        graph[0].add(new Edge(0,3,40));
        graph[1].add(new Edge(0,1,10));

        graph[1].add(new Edge(0,3,40));
        graph[1].add(new Edge(0,3,40));

        graph[2].add(new Edge(0,3,40));
        graph[2].add(new Edge(0,3,40));

    }
}


QUESTION1 - YOU ARE GIVEN A GRAPH, A SRC AND A DESTINATION VERTEX. YOU ARE REQUIRED TO FIND IF A PATH EXISTS BETWEEN SRC AND DEST. 
IF IT DOES PRINT TRUE ELSE PRINT FALSE

input
7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
0 
6

public class kannu {
    static class Edge{
        int src; //source
        int nbr; // neighbour
        int wt; // weights

        Edge(int src, int nbr,int wt){
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }
    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vces];
        for(int i = 0;i<vces;i++){
            graph[i] = new ArrayList<>();
        }

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());

        boolean[] visited = new boolean[vces];
        boolean path = hasPath(graph,src,dest,visited);
        System.out.println(path);
    }

    public static boolean hasPath(ArrayList<Edge>[] graph, int src , int dest, boolean[] visited){
        // recursion ke saath socho ...ki agar neighbour se jaa sakte then true
        // boolean visited array se we can check we arent checking the same neighbour again

        if(src == dest){
            return true;
        }

        visited[src] = true;

        for(Edge edge : graph[src]){
            if(visited[edge.nbr] == false){
                boolean hasNbrPath = hasPath(graph,edge.nbr,dest,visited);
                if(hasNbrPath == true){
                    return true;
                }
            }

        }

        return false;
    }
}


QUESTION2 - PRINT ALL PATHS LEXOGRAPHICALLY
public class kannu {
    static class Edge{
        int src; //source
        int nbr; // neighbour
        int wt; // weights

        Edge(int src, int nbr,int wt){
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }
    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vces];
        for(int i = 0;i<vces;i++){
            graph[i] = new ArrayList<>();
        }

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        int src = Integer.parseInt(br.readLine());
        int dest = Integer.parseInt(br.readLine());

        boolean[] visited = new boolean[vces];
        printALlPaths(graph,src,dest,visited,src+"");
    }

    public static void printALlPaths(ArrayList<Edge>[] graph, int src , int dest, boolean[] visited, String psf){
        if(src == dest){
            System.out.println(psf);
            return ;
        }

        visited[src] = true;

        for(Edge edge : graph[src]){
            if(!visited[edge.nbr]){
                printALlPaths(graph,edge.nbr,dest,visited,psf+edge.nbr);
            }
        }
        visited[src] = false;
    }
}



QUESTION3 - SMALLEST, LARGEST, CEIL,FLOOR,KTH LARGEST PATH

QUESTION4 - GET CONNECTED COMPONENTS OF A GRAPH ...YOU ARE GIVEN A GRAPGH.YOU ARE REQUIRED TO FIND AND PRINT ALL CONNECTED COMPONENTS OF THE GRAPH
7
5
0 1 10
2 3 10
4 5 10
5 6 10
4 6 10

we traverse through each node individually and see wahan se kitne paths possible hai....jishar tak honge utna ek component

public class litcode {

    static class Edge{
        int src;
        int nbr;
        int wt;

         Edge(int v1,int v2,int wt){
            this.src=v1;
            this.nbr=v2;
            this.wt=wt;
        }
    }
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vces];
        for(int i = 0;i<vces;i++){
            graph[i] = new ArrayList<>();
        }

        int edges = Integer.parseInt(br.readLine());
        for(int i = 0;i<edges;i++){
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1,v2,wt));
            graph[v2].add(new Edge(v2,v1,wt));
        }

        ArrayList<ArrayList<Integer>> comps = new ArrayList<>();

        boolean[] visited = new boolean[vces];

        for(int i = 0;i<vces;i++){
            if(!visited[i]){
                ArrayList<Integer> comp = new ArrayList<>();
                drawTree(graph,i,comp,visited);
                comps.add(comp);
            }
        }

        System.out.println(comps);
    }

    public static void drawTree(ArrayList<Edge>[] graph,int src, ArrayList<Integer> comp,boolean[] visited){
        visited[src] = true;
        comp.add(src);
        for(Edge e: graph[src]){
            if(!visited[e.nbr]){
                drawTree(graph,e.nbr,comp,visited);
            }
        }
    }
}


QUESTION5 - CHECK IF A GRAPH IS CONNECTED

ek graph tabhi connected bol sakte hai agar har vertex se har dusri vertex ka raasta maujood ho

upar wala code hi bass dekh lena ki joh arraylist of arraylist mein ek arraylist aisa hoga jismein saare vertices mil jayenge...which means its connected
toh last mein System.out.println(comps); iski jagah System.out.println(comps.size() == 1);..agar true hua toh hai connected else false

QUESTION6- COUNT NUMBER OF ISLANDS
YOU ARE GIVEN A 2D ARRAY WHERE 0'S REPRESENT LAND AND 1'S REPRESENT WATER.ASSUME EVERY CELL IS LINKED TO ITS NORTH,EAST,WEST AND SOUTH CELL. YOU ARE REQUIRED TO
FIND AND COUNT THE NUMBER OF ISLANDS
